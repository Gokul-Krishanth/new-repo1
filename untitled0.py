# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kNzYtZYdZK-UGSTMn8atYhZm6F_s5C0C
"""

print("Hello World")

a = 2024
print("India Won the Cup in", a)

b = "sjbghabjc"
type(b)

name =input("Enter your name:")

name

a = int(input("enter a: "))
b = int(input("enter b: "))
print(a + b)

bool("")

if 56>50:
  print("1")

from bs4 import BeautifulSoup
html_snippet = """
<div>
  <p>Hello, <b>World!</b></p>
  <p>Welcome to <a href="https://example.com">Example</a>.</p>
</div>
"""

soup = BeautifulSoup(html_snippet, 'html.parser')

extracted_text = soup.find(name="div").getText()

print(extracted_text)

time = int(input("Enter the time:"))
if time >= 9 and time <= 12:
  print("Good Morning")
elif time > 12 and time <= 17:
  print("Good Afternoon")
elif time >= 5 and time <= 24:
  print("Good Night")
else:
  print("Please Sleep")

i = 1
while i <= 16:
  print(i)
  i+=3

for i in range(1,17,3):
  if i == 16:
    print(i, end="")
  else:
    print(i, end=",")

i = 1
n = 1

while n < 45:
  print(n)
  n = n + (2*i)
  i += 1

n = 3

for i in range(n):
  for j in range(n):
    print('*',end=' ')
  print()

num1 = 16
num2 = 24
m = min(num1, num2)

for i in range(m, 1, -1):
  if num1 % i == 0 and num2 % i == 0:
    print(i)
    break

num1 = 6
num2 = 8
m = max(num1, num2)

while True:
  print(f"check {m}")
  if m % num1 == 0 and m % num2 == 0:
    print(m)
    break
  m+=1

def firsfunc():

def g():
  print("g")
  return 1
  print("y")

g()



def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

x = gcd(48, 180)
print(x)



def multiply(num1=3, num2):
    return num1 * num2

print(multiply(2, 4))

def do_something(n):
    total = 0
    i = 1
    while i <= n:
        total += i
        i += 1
    return total

print(do_something(5))

def r():
  # a = 50
  print(a)

a=30
r()

def function(var):
    print(var)

function(3)

var = 5
function(var)



df = lambda x, y : x + ',' + y

df('gokul','krishanth')

df = [1,2,3,4]

df.append(5)
print(df)

df.append(5)

print(df)

df.insert(2, 10)

print(df)

sal = [1000, 2000, 3000, 4000]

for i in range(len(sal)):
  sal[i] = sal[i] + 100
print(sal)

runs_virat = [67, 54, 12, 34, 77, 89, 101]

67 + 12 + 77 + 101

sum = 0
avg = 0
min = 0
max = 0

for i in runs_virat:
  sum = sum + i
print(f"sum of runs: {sum}")

avg = sum / len(runs_virat)
print(f"Average of runs: {avg}")

for i in runs_virat:
  if i > max:
    max = i
print(f"Max of run: {max}")

for i in runs_virat:
  if i < max:
    min = i
print(f"Min of run: {min}")

sum = 0
for i in range(len(runs_virat)):
  if i%2 == 0:
    sum = sum + runs_virat[i]
print(sum)

my_list = [10, 20, 30, 40, 50]
i = 0
while i < len(my_list):
    my_list[i] *= 2
    i += 1
print(my_list)

a = [20, 40, 60, 80, 100]

a.index(40)

print(a[1::2])

print(a[-2::-1])

b =(2,3,5,15,10,12)

for i in

x = [2,3,5,15,10,12]
a = x[-1]
b = x[:-1]
print( [a] + b )

x.reverse()
print(x)

t = [[1,2,3],[4,5,6],[7,8,9]]
print(t)

import pandas as pd

df = pd.DataFrame(t)
print(df)

print(t[0][:2])

a = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]]
m = []

for i in a:
  sum = 0
  for j in i:
    sum += j
  m.append(sum)

print(m)

print(m)

for i in a:
  for j in i:
    print(j, end=" ")
  print()

n = int(input())
x = []

for i in range(n):
  sum = 0
  for j in range(n):
    # y.append()
    sum += int(input())
  x.append(sum)
print(x)

"valid" > "invalid"

ord('8')

def palindrome(a):
  b = a.lower()
  return b == b[::-1]


a = input()
palindrome(a)

message = "Hello World!"
i = 0
while i < len(message):
  if i % 2 == 0:
    print(message[i], end = "")
  i += 1

message = "Hello World!"
print(message.replace("o", "e"))

A = "aabbccbb"
B = 98
C = 100
print(str(chr(B)))
A.replace(str(chr(B)), str(chr(C)))
print(A)

date = "08/12/1998"
d = date.split("/")
print(d)

date.info()

word = "Scaler Academy"
n = len(word)
word1 = word.upper()
word2 = word.lower()

converted_word = ""

for i in range(n):
     if i % 2 == 0:
          converted_word += word2[i]
     else:
          converted_word += word1[i]

print(converted_word)

str1 = "quick brown fox word!"
print(str1[12:15], str1[:5], str1[-5:-1], str1[8:110], str1[-4:])

s = "My PO Box number is 310"

s.startswith('My P')

s="hello"
c =s[:]
print(c)

e = "Rand" + "" + "om Str" + "" + "ing"
print(e)

a = "gokul"
id(a)

x = (1, 2, 3)
y = (4, 5, 6)
z = x + y
print(z)

fruits = {"apple", "banana", "cherry"}
fruits.add("orange")
fruits.update(["mango", "grape"])
print(len(fruits))

tup1 = (1150,50,909)
print(max(tup1))

set1 = {1, 2, 4}
set2 = {4, 5, 6}
print(len(set1 + set2))

a = (1,2,3,4,5)
o = a[::2]
e = a[1::2]

tup = (10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)

a =set(tup)

for i in a:
  count = 0
  for j in tup:
    if j == i:
      count += 1
  print(f"{i} : {count}")

s = set('Scaler', 'Academy', 'is', 'Awesome')
print(s )

a = set(10 20 30 40)
b = set(30 40 50 60)

print(a,b)

student_marks = [['A', 10], ['B', 20], ['C', 30]]
a = input()
for i in student_marks:
  if i[0] == a:
    print(i[1])

dti = {'A': [10,20,30], 'B': 'abcdef', 'C': 2.5}

for i,j in dti.items():
  print(i,j)

dti[2.5] = 10

dti

dti.pop(2.5)

import random

rand = random.choice(range(0,11))
rand

s = "rrssssttttrrrbbbkkkllll"
dictionary ={}

for i in s:
  dictionary[i] = s.count(i)
dictionary

bbt = {'Sheldon': 1, 'Leonard': 2}
bbt.update({'Penny': 2})
print(bbt)

freshers = {
    'student1': {'name': 'yash', 'salary': 7500},
    'student2': {'name': 'heet', 'salary': 8000},
    'student3': {'name':'smit', 'salary': 6500}
}

freshers['student3']['salary'] = 8500

dict = {5: 'a', 10: 'b', 15: 'c'}

print(dict.get(0))

prices = {'apple': 1.50, 'banana': 0.75, 'orange': 1.25}

prices.clear('banana')
prices

class Student:
  def __init__(self, name, age):
    self.name = name
    self.age = age
    self.country = "India"
    self.school = "ABC"

  def hello(self):
    print("Hello")

s1 = Student("patricia","18")
s1.hello()
s1.name

class Animal:
  def __init__(self, name, species):
    self.name = name
    self.species = species

  def intro(self):
    print(f"Hello my name is {self.name} and I am a {self.species}")
    print("bow bow")

s1 = Animal("tommy", "dog")
s1.intro()

class Student:
    name = "Bipin"
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def hello(self):
      print(f"Hello {self.name}")

bipin = Student("Ayush", 20)
bipin.hello()

class Calculator:
    def __init__(self, number):
        self.number = number

    def multiply_by_two(self):
        return self.number * 2

calc = Calculator(3)
print(calc.multiply_by_two())

class solution:
  def initial(self,sets):
    return self.final(sets)

  def final(self, sets):
    return list(map(lambda x: ((x**3)%2==0,x**3),sets))

print(solution().initial([4,5,6]))

class fruits:
    def __init__(self, price):
        self.price = price

obj=fruits(50)
obj.quantity=10
obj.bags=2

print(obj.quantity+len(obj.__dict__))

class A:
  def __init__(self, a):
    self.a = a
  def __add__(self, b):
    if isinstance(b, int):
      return A(self.a + b)
    return A(self.a + b.a)
  def __str__(self):
    return f"{self.a}"


one = A(1)
two = A(2)

print(one + two + 100)

class A:
    def do_something(self):
        print("I do something!", end=" ")

class B(A):
    def do_something(self):
        super().do_something()
        print("I also do something!", end=" ")

b = B()
b.do_something()

class Bank:
  def __init__(self, name, balance):
    self.__name = name
    self.__balance = balance

  def deposit(self, amount):
    self.__balance += amount

  def withdraw(self, amount):
    self.__balance -= amount

a1 = Bank('Gokul', 10000)
a1.__balance = 2000
print(a1.__balance)
print(a1._Bank__balance)

a1._Bank__balance = 21
print(a1._Bank__balance)

class A:
   def one(self):
       return self.two()
   def two(self):
       return 'A'
class B(A):
   def two(self):
       return 'B'
obj= B()
print(obj.one())

class Parent:
  def __init__(self):
    pass
  def print(self):
    print("60")

class Child(Parent):
  def __init__(self):
    super().__init__()
  def type(self):
    super().print()
C=Child()
C.type()

class A:

  def __init__(self, x, y):

    self.x = x
    self.y = y

  def __str__(self):

    return 1
  def __eq__(self, other):

    return self.x * self.y == other.x * other.y

obj1 = A(9, 8)
obj2 = A(8, 9)
print(obj1 == obj2)

class A:
 def __init__(self, name, sound="Grrrr"):
   self.name = name
   self.sound = sound

 def make_noise(self):
   print("{} says, {}".format(self.name,self.sound))

class B(A):
 def __init__(self, name="Rachel"):
   super().__init__(name, "Meow!")

 def make_noise(self,sound="Grrrr!"):
   print("{} says, {}".format(self.name, sound))

pet_cat = B()
pet_cat.make_noise()

class A:
    def __init__(self):
        self.multiply(15)
        print(self.i)

    def multiply(self, i):
        self.i = 4 * i

class B(A):
    def __init__(self):
        super().__init__()

    def multiply(self, i):
        self.i = 2 * i;

obj = B()

a = [1,2,3,4,5,6]

square = map(lambda x: x**3, a)
print(list(square))

b = [1,2,3,4,5,6]

cube = map(lambda x: x**3, b)
print(list(cube))
addi = map(lambda x,y : x+y, a, b)
print(list(addi))

odd=lambda x: bool(x%2)
result=[n for n in range(10)]

for i in result:
    if odd(i):
        continue
    else:
        print(i, end=" ")

students = [
    {"name": "Alice", "age": 17, "grades": [88, 90, 92]},
    {"name": "Bob", "age": 19, "grades": [76, 80, 78]},
    {"name": "Charlie", "age": 18, "grades": [90, 85, 85]}
]
students

students = list(filter(lambda x: x['age']>=18, students))

students

def output_formatter(func):
    # complete the decorator
    def inner(a, b, c):
        print(f"Name: {a}, Age: {b}, Average Grade: {c}")
    return inner

# decorate the function
@output_formatter
def process_students_data(students):
    # complete the function
    students = list(filter(lambda x: x['age'] >= 18, students))
    for student in students:
        average_grade = sum(student['grades']) / len(student['grades'])
        output_formatter(student['name'], student['age'], average_grade)

students = [
    {"name": "Alice", "age": 17, "grades": [88, 90, 92]},
    {"name": "Bob", "age": 19, "grades": [76, 80, 78]},
    {"name": "Charlie", "age": 18, "grades": [90, 85, 85]}
]

process_students_data(students)

process_students_data(students)

size = list(map())

def output_formatter(func):
    # Complete the decorator
    def inner(students):
        # Loop through the students and process data
        for student in students:
            average_grade = sum(student['grades']) / len(student['grades'])
            # Print formatted output for each student
            print(f"Name: {student['name']}, Age: {student['age']}, Average Grade: {average_grade}")
    return inner

@output_formatter
def process_students_data(students):
    # The function just returns the students filtered by age >= 18
    return list(filter(lambda x: x['age'] >= 18, students))

students = [
    {"name": "Alice", "age": 17, "grades": [88, 90, 92]},
    {"name": "Bob", "age": 19, "grades": [76, 80, 78]},
    {"name": "Charlie", "age": 18, "grades": [90, 85, 85]}
]

# Process students, apply filter and output the formatted result
process_students_data(students)

a = []
x = 0
for i in range(10):
  x += i
  a.append(x)
print(a)

from functools import reduce

l = [120, 1, 3, 100, 10, 15, 21, 28, 36, 45]

s = reduce(lambda x,y: x if x > y else y, l)
print(s)

def sample_func(x, y, *args, **kwargs):
    return x, y, args, kwargs

sample_func(1, 2, 3, 4, a=5, b=6)

column_names = ['name', 'salary', 'job']
db_rows = [('Alice', 180000, 'data scientist'),
           ('Bob', 99000, 'data engineer'),
           ('Frank', 87000, 'data analyst')]

db = [dict(zip(column_names, row)) for row in db_rows]
print(db)

list1 = [[1,2,3],[4,5,6],[7,8,9]]
list2 = [[9,8,7],[6,5,4],[3,2,1]]
ls11,ls12,ls13=list1
ls21,ls22,ls23=list2
print(list(zip(ls11,ls12,ls13,ls21,ls22,ls23)))

ls11

emails = ['shortemail@example.com', 'averylongemailaddress@domain.com', 'valid@example.com']
print(emails)

first = list(filter(lambda x: '@' in x and len(x.split('@')[0]) <= 20 and len(x.split('@')[1]) > 4, emails))
first

# first_check = list(map(lambda x: x if '@' in x , emails))
# first_check

ids = ["SAM@gmail.com", "Ram@gmail.com", "sam@gmail.com", "samJohnson@iit.com", "SAM@harvard.com"]
name = "sam"
result = list(filter(lambda x : name in x.lower() , ids))
print(result)

import math

a = 2
b = 81
math.sqrt(b)

import random

random.randint(0,1000)

ids = ["SAM@gmail.com", "Ram@gmail.com", "sam@gmail.com", "samJohnson@iit.com", "SAM@harvard.com"]

random.choices(ids)

try:
    assert False, "Error occurred!"
except AssertionError as e:
    print(e)

l1 = [2, 0, "hello", None]

for e in l1:
    try:
        result = 5 / int(e)
        print("N")
    except Exception as ex:
        print("E")
    except ZeroDivisionError as z:
        print("Z")

def even(x):
  try:
    if x%2==0:
      return "even"
    else:
      raise Exception
  except:
    return("odd")
  finally:
    return "integer"

print(even(5))    #A
print(even(4))    #B

try:
  print(a)
except ValueError:
  a=3
  print(a)
except:
  a=5
  print(a)
finally:
  a=4
  print(a)

import math
result = 1
for i in range(1,7):
     result += 1/(math.factorial(i))
print(round(result,2))

import math
import numpy as np
a=[1,2,3,45]
print(np.mean(a))
print(np.std(a))

"LHS".lower()

32//2

16//2

1//2

students = [
    {"name": "Alice", "age": 17, "grades": [88, 90, 92]},
    {"name": "Bob", "age": 19, "grades": [76, 80, 78]},
    {"name": "Charlie", "age": 18, "grades": [90, 85, 85]}
]

list(filter(lambda x: x['age'] >= 18, students))

list(map(lambda students: sum(students['grades'])/len(students['grades']), students))

def output_formatter(func):
    """
    Decorator to format the output for each student.
    """
    def inner(a, b, c):
        # Print formatted output as "Name: [name], Age: [age], Average Grade: [average_grade]"
        print(f"Name: {a}, Age: {b}, Average Grade: {c:.2f}")
    return inner

# Decorate the function with the output_formatter decorator
@output_formatter
def process_students_data(students):
    """
    Process the student data to filter those with age >= 18,
    calculate their average grades, and pass data to the output formatter.
    """
    # Filter students with age >= 18
    filtered_students = list(filter(lambda x: x['age'] >= 18, students))

    # Process each student and calculate their average grade
    for student in filtered_students:
        avg_grade = sum(student['grades']) / len(student['grades'])
        # Pass the student's information to the decorated function (formatted output)
        process_students_data(student['name'], student['age'], avg_grade)

# Sample input
students = [
    {"name": "Alice", "age": 17, "grades": [88, 90, 92]},
    {"name": "Bob", "age": 19, "grades": [76, 80, 78]},
    {"name": "Charlie", "age": 18, "grades": [90, 85, 85]},
    {"name": "David", "age": 21, "grades": [85, 88, 89]}
]

# Calling the function
process_students_data(students)

students = [
    {"name": "Alice", "scores": {"math": 88, "science": 90, "english": 85}, "grace_marks": 10},
    {"name": "Bob", "scores": {"math": 72, "science": 68, "english": 74}, "grace_marks": 11},
    {"name": "Charlie", "scores": {"math": 95, "science": 92, "english": 91}, "grace_marks": 9},
    {"name": "David", "scores": {"math": 60, "science": 75, "english": 70}, "grace_marks": 10},
    {"name": "Eve", "scores": {"math": 82, "science": 78, "english": 88}, "grace_marks": 11}
]

for student in students:
    round(sum(student['scores'].values())/len(student['scores']),2)

grace_total = 0
for student in students:
    grace_total += student['grace_marks']
print(grace_total/len(students))



